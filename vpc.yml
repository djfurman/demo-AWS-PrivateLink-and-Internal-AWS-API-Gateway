---
AWSTemplateFormatVersion: "2010-09-09"
Description: Sets up and controls the VPC itself, Internat GW, Subnets, Route tables, Network ACLs, and Elastic IPs

Parameters:
  VpcCidr:
    Description: The full IPv4 CIDR range of the VPC to be built
    Type: String

Resources:
  # VPC
  LocalVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

  # Internet Gateway
  # Intentionally Omitting an IGW

  # Subnets
  # Define Two Sets of Subnets

  # Internal Subnets
  SubnetInternalA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref 'AWS::Region']
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ] ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Classification
          Value: VpcOnly
        - Key: Name
          Value: InternalA
      VpcId: !Ref LocalVpc
  SubnetInternalB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref 'AWS::Region']
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 1, !Cidr [!GetAtt LocalVpc.CidrBlock, 4, 11]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Classification
          Value: VpcOnly
        - Key: Name
          Value: InternalB
      VpcId: !Ref LocalVpc
  SubnetInternalC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, Fn::GetAZs: !Ref 'AWS::Region']
      # Identifies a /21 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 2, !Cidr [!GetAtt LocalVpc.CidrBlock, 4, 11]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Classification
          Value: VpcOnly
        - Key: Name
          Value: InternalC
      VpcId: !Ref LocalVpc

  # Service Subnets
  SubnetServiceA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref 'AWS::Region' ]
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 0, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Classification
          Value: Service
        - Key: Name
          Value: ServiceA
      VpcId: !Ref LocalVpc
  SubnetServiceB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref 'AWS::Region' ]
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 1, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Classification
          Value: Service
        - Key: Name
          Value: ServiceB
      VpcId: !Ref LocalVpc
  SubnetServiceC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, Fn::GetAZs: !Ref 'AWS::Region' ]
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 2, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Classification
          Value: Service
        - Key: Name
          Value: ServiceC
      VpcId: !Ref LocalVpc

  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LocalVpc

  # Routing Subnet Attachments
  RouteTableAttachInternalA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInternalA
  RouteTableAttachInternalB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInternalB
  RouteTableAttachInternalC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetInternalC
  RouteTableAttachServiceA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetServiceA
  RouteTableAttachServiceB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetServiceB
  RouteTableAttachServiceC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetServiceC

  # Network ACL
  # Internal
  NetworkAclInternal:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, internal]]
      VpcId: !Ref LocalVpc
  NetworkAclInternalAllowHttpsTcpEgressToService1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /21 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]]
      Egress: true
      NetworkAclId: !Ref NetworkAclInternal
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 100
  NetworkAclInternalAllowHttpsTcpEgressToService2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /21 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]]
      Egress: true
      NetworkAclId: !Ref NetworkAclInternal
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 110
  NetworkAclInternalAllowHttpsTcpEgressToService3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /21 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]]
      Egress: true
      NetworkAclId: !Ref NetworkAclInternal
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 120
  NetworkAclInternalAllowEphemeralTcpFromServiceA:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 0, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      Egress: false
      NetworkAclId: !Ref NetworkAclInternal
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 100
  NetworkAclInternalAllowEphemeralTcpFromServiceB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 1, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      Egress: false
      NetworkAclId: !Ref NetworkAclInternal
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 110
  NetworkAclInternalAllowEphemeralTcpFromServiceC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 2, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      Egress: false
      NetworkAclId: !Ref NetworkAclInternal
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 120
  NetworkAclInternalBlockPublicInternetEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkAclInternal
      PortRange:
        From: 1
        To: 65535
      Protocol: -1 # All protocols
      RuleAction: deny
      RuleNumber: 1000
  NetworkAclInternalBlockPublicInternetIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAclInternal
      PortRange:
        From: 1
        To: 65535
      Protocol: -1 # All protocols
      RuleAction: deny
      RuleNumber: 1000

  # NetworkACL Subnet Attachment
  NetworkAclAttachInternalA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAclInternal
      SubnetId: !Ref SubnetInternalA
  NetworkAclAttachInternalB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAclInternal
      SubnetId: !Ref SubnetInternalB
  NetworkAclAttachInternalC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAclInternal
      SubnetId: !Ref SubnetInternalC

  # Service
  NetworkAclService:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, service]]
      VpcId: !Ref LocalVpc
  NetworkAclServiceAllowEphemeralTcpEgressFromServiceA:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 0, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      Egress: true
      NetworkAclId: !Ref NetworkAclService
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 100
  NetworkAclServiceAllowEphemeralTcpEgressFromServiceB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 1, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      Egress: true
      NetworkAclId: !Ref NetworkAclService
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 110
  NetworkAclServiceAllowEphemeralTcpEgressFromServiceC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /27 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 2, !Cidr [ !Select [ 3, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]], 3, 5 ]]
      Egress: true
      NetworkAclId: !Ref NetworkAclService
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 120
  NetworkAclServiceAllowHttpsTcpFromInternalA:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /21 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]]
      Egress: false
      NetworkAclId: !Ref NetworkAclService
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 100
  NetworkAclServiceAllowHttpsTcpIngressFromInternalB:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /21 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]]
      Egress: false
      NetworkAclId: !Ref NetworkAclService
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 110
  NetworkAclServiceAllowHttpsTcpIngressFromInternalC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      # Identifies a /21 sized Subnet; !Cidr function requires host identifier bits, not network identifier bits
      # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-cidr.html#cidrBits
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt LocalVpc.CidrBlock, 4, 11 ]]
      Egress: false
      NetworkAclId: !Ref NetworkAclService
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # tcp
      RuleAction: allow
      RuleNumber: 120
  NetworkAclServiceBlockPublicInternetEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkAclService
      PortRange:
        From: 1
        To: 65535
      Protocol: -1 # All protocols
      RuleAction: deny
      RuleNumber: 1000
  NetworkAclServiceBlockPublicInternetIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAclService
      PortRange:
        From: 1
        To: 65535
      Protocol: -1 # All protocols
      RuleAction: deny
      RuleNumber: 1000

  # NetworkACL Subnet Attachment
  NetworkAclAttachServiceA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAclService
      SubnetId: !Ref SubnetServiceA
  NetworkAclAttachServiceB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAclService
      SubnetId: !Ref SubnetServiceB
  NetworkAclAttachServiceC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkAclService
      SubnetId: !Ref SubnetServiceC

# Elastic IP
# No use case for an Elastic IP

# For Reference Elsewhere
Outputs:
  GeneratedVpc:
    Description: VPC ID of the VPC created
    Export:
      Name: !Join [ ":", [ !Ref AWS::StackName, local-vpc]]
    Value: !Ref LocalVpc
  SubnetIntA:
    Description: Subnet ID for Primary
    Export:
      Name: !Join [ ":", [ !Ref AWS::StackName, internal-a]]
    Value: !Ref SubnetInternalA
  SubnetIntB:
    Description: Subnet ID for Secondary
    Export:
      Name: !Join [ ":", [ !Ref AWS::StackName, internal-b]]
    Value: !Ref SubnetInternalB
  SubnetIntC:
    Description: Subnet ID for Secondary
    Export:
      Name: !Join [ ":", [ !Ref AWS::StackName, internal-c]]
    Value: !Ref SubnetInternalC
  SubnetSvcA:
    Description: Subnet ID for Secondary
    Export:
      Name: !Join [ ":", [ !Ref AWS::StackName, service-a]]
    Value: !Ref SubnetServiceA
  SubnetSvcB:
    Description: Subnet ID for Secondary
    Export:
      Name: !Join [ ":", [ !Ref AWS::StackName, service-b]]
    Value: !Ref SubnetServiceB
  SubnetSvcC:
    Description: Subnet ID for Secondary
    Export:
      Name: !Join [ ":", [ !Ref AWS::StackName, service-c]]
    Value: !Ref SubnetServiceC
